{"version":3,"sources":["vendor/ember-cli/app-prefix.js","tasky/adapters/application.js","tasky/adapters/ls-adapter.js","tasky/app.js","tasky/components/app-version.js","tasky/components/bread-crumb.js","tasky/components/editable-div.js","tasky/components/jqui-accordion/component.js","tasky/components/jqui-autocomplete/component.js","tasky/components/jqui-button/component.js","tasky/components/jqui-datepicker/component.js","tasky/components/jqui-menu/component.js","tasky/components/jqui-progress-bar/component.js","tasky/components/jqui-slider/component.js","tasky/components/jqui-spinner/component.js","tasky/components/jqui-tabs/component.js","tasky/components/task-item.js","tasky/components/task-list.js","tasky/controllers/index.js","tasky/helpers/pluralize.js","tasky/helpers/singularize.js","tasky/initializers/app-version.js","tasky/initializers/container-debug-adapter.js","tasky/initializers/data-adapter.js","tasky/initializers/ember-data.js","tasky/initializers/export-application-global.js","tasky/initializers/injectStore.js","tasky/initializers/store.js","tasky/initializers/transforms.js","tasky/instance-initializers/ember-data.js","tasky/models/task.js","tasky/resolver.js","tasky/router.js","tasky/routes/index.js","tasky/routes/task.js","tasky/serializers/application.js","tasky/serializers/ls-serializer.js","tasky/services/ajax.js","tasky/templates/application.js","tasky/templates/components/bread-crumb.js","tasky/templates/components/editable-div.js","tasky/templates/components/task-item.js","tasky/templates/components/task-list.js","tasky/templates/index.js","tasky/templates/task.js","vendor/ember-cli/app-suffix.js","vendor/ember-cli/app-config.js","vendor/ember-cli/app-boot.js"],"sourcesContent":["\"use strict\";\n\n/* jshint ignore:start */\n\n\n\n/* jshint ignore:end */\n","define('tasky/adapters/application', ['exports', 'ember-localstorage-adapter'], function (exports, _emberLocalstorageAdapter) {\n    exports['default'] = _emberLocalstorageAdapter['default'].extend({\n        namespace: 'tasky'\n    });\n});","define('tasky/adapters/ls-adapter', ['exports', 'ember-localstorage-adapter/adapters/ls-adapter'], function (exports, _emberLocalstorageAdapterAdaptersLsAdapter) {\n  exports['default'] = _emberLocalstorageAdapterAdaptersLsAdapter['default'];\n});","define('tasky/app', ['exports', 'ember', 'tasky/resolver', 'ember-load-initializers', 'tasky/config/environment'], function (exports, _ember, _taskyResolver, _emberLoadInitializers, _taskyConfigEnvironment) {\n\n  var App = undefined;\n\n  _ember['default'].MODEL_FACTORY_INJECTIONS = true;\n\n  App = _ember['default'].Application.extend({\n    modulePrefix: _taskyConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _taskyConfigEnvironment['default'].podModulePrefix,\n    Resolver: _taskyResolver['default']\n  });\n\n  (0, _emberLoadInitializers['default'])(App, _taskyConfigEnvironment['default'].modulePrefix);\n\n  exports['default'] = App;\n});","define('tasky/components/app-version', ['exports', 'ember-cli-app-version/components/app-version', 'tasky/config/environment'], function (exports, _emberCliAppVersionComponentsAppVersion, _taskyConfigEnvironment) {\n\n  var name = _taskyConfigEnvironment['default'].APP.name;\n  var version = _taskyConfigEnvironment['default'].APP.version;\n\n  exports['default'] = _emberCliAppVersionComponentsAppVersion['default'].extend({\n    version: version,\n    name: name\n  });\n});","define('tasky/components/bread-crumb', ['exports', 'ember'], function (exports, _ember) {\n    exports['default'] = _ember['default'].Component.extend({\n        tagName: 'ul',\n        classNames: ['breadcrumb']\n    });\n});","define('tasky/components/editable-div', ['exports', 'ember'], function (exports, _ember) {\n    exports['default'] = _ember['default'].Component.extend({\n        tagName: 'div',\n        attributeBindings: ['contenteditable'],\n        // Variables:\n        editable: true,\n        isUserTyping: false,\n        plaintext: true,\n\n        // Properties:\n        contenteditable: (function () {\n            var editable = this.get('editable');\n\n            return editable ? 'true' : undefined;\n        }).property('editable'),\n\n        // Processors:\n        processValue: function processValue() {\n            if (!this.get('isUserTyping') && this.get('value')) {\n                return this.setContent();\n            }\n        },\n\n        // Observers:\n        valueObserver: (function () {\n            _ember['default'].run.once(this, 'processValue');\n        }).observes('value', 'isUserTyping'),\n\n        // Events:\n        didInsertElement: function didInsertElement() {\n            return this.setContent();\n        },\n\n        focusOut: function focusOut() {\n            return this.set('isUserTyping', false);\n        },\n\n        keyDown: function keyDown(event) {\n            if (!event.metaKey) {\n\n                var keyCode = event.keyCode || event.which;\n                var isShiftKey = event.shiftKey ? true : false;\n\n                if (keyCode === 13) {\n                    event.preventDefault();\n                    //$(e.target).removeAttr(\"contenteditable\");\n                    this.send('enterHandler', isShiftKey);\n                } else if (keyCode === 9) {\n                    event.preventDefault();\n                    this.send('tabHandler', isShiftKey);\n                } else if (keyCode === 38) {\n                    event.preventDefault();\n                    this.send('upHandler');\n                } else if (keyCode === 40) {\n                    event.preventDefault();\n                    this.send('downHandler');\n                }\n\n                return this.set('isUserTyping', true);\n            }\n        },\n\n        keyUp: function keyUp(event) {\n            if (this.get('plaintext')) {\n                return this.set('value', this.$().text());\n            } else {\n                return this.set('value', this.$().html());\n            }\n        },\n\n        setContent: function setContent() {\n            return this.$().html(_ember['default'].Handlebars.Utils.escapeExpression(this.get('value')));\n        },\n\n        actions: {\n            enterHandler: function enterHandler(isShiftKey) {\n                this.sendAction('enterHandler', isShiftKey);\n            },\n            tabHandler: function tabHandler(isShiftKey) {\n                this.sendAction('tabHandler', isShiftKey);\n            },\n            upHandler: function upHandler() {\n                this.sendAction('upHandler');\n            },\n            downHandler: function downHandler() {\n                this.sendAction('downHandler');\n            }\n        },\n        didRender: function didRender() {}\n    });\n});","define('tasky/components/jqui-accordion/component', ['exports', 'ember', 'ember-cli-jquery-ui/components/jqui-accordion/component'], function (exports, _ember, _emberCliJqueryUiComponentsJquiAccordionComponent) {\n  exports['default'] = _emberCliJqueryUiComponentsJquiAccordionComponent['default'];\n});","define('tasky/components/jqui-autocomplete/component', ['exports', 'ember', 'ember-cli-jquery-ui/components/jqui-autocomplete/component'], function (exports, _ember, _emberCliJqueryUiComponentsJquiAutocompleteComponent) {\n  exports['default'] = _emberCliJqueryUiComponentsJquiAutocompleteComponent['default'];\n});","define('tasky/components/jqui-button/component', ['exports', 'ember', 'ember-cli-jquery-ui/components/jqui-button/component'], function (exports, _ember, _emberCliJqueryUiComponentsJquiButtonComponent) {\n  exports['default'] = _emberCliJqueryUiComponentsJquiButtonComponent['default'];\n});","define('tasky/components/jqui-datepicker/component', ['exports', 'ember', 'ember-cli-jquery-ui/components/jqui-datepicker/component'], function (exports, _ember, _emberCliJqueryUiComponentsJquiDatepickerComponent) {\n  exports['default'] = _emberCliJqueryUiComponentsJquiDatepickerComponent['default'];\n});","define('tasky/components/jqui-menu/component', ['exports', 'ember', 'ember-cli-jquery-ui/components/jqui-menu/component'], function (exports, _ember, _emberCliJqueryUiComponentsJquiMenuComponent) {\n  exports['default'] = _emberCliJqueryUiComponentsJquiMenuComponent['default'];\n});","define('tasky/components/jqui-progress-bar/component', ['exports', 'ember', 'ember-cli-jquery-ui/components/jqui-progress-bar/component'], function (exports, _ember, _emberCliJqueryUiComponentsJquiProgressBarComponent) {\n  exports['default'] = _emberCliJqueryUiComponentsJquiProgressBarComponent['default'];\n});","define('tasky/components/jqui-slider/component', ['exports', 'ember', 'ember-cli-jquery-ui/components/jqui-slider/component'], function (exports, _ember, _emberCliJqueryUiComponentsJquiSliderComponent) {\n  exports['default'] = _emberCliJqueryUiComponentsJquiSliderComponent['default'];\n});","define('tasky/components/jqui-spinner/component', ['exports', 'ember', 'ember-cli-jquery-ui/components/jqui-spinner/component'], function (exports, _ember, _emberCliJqueryUiComponentsJquiSpinnerComponent) {\n  exports['default'] = _emberCliJqueryUiComponentsJquiSpinnerComponent['default'];\n});","define('tasky/components/jqui-tabs/component', ['exports', 'ember', 'ember-cli-jquery-ui/components/jqui-tabs/component'], function (exports, _ember, _emberCliJqueryUiComponentsJquiTabsComponent) {\n  exports['default'] = _emberCliJqueryUiComponentsJquiTabsComponent['default'];\n});","define('tasky/components/task-item', ['exports', 'ember'], function (exports, _ember) {\n    exports['default'] = _ember['default'].Component.extend({\n        classNames: ['taskitem'],\n        classNameBindings: ['selected'],\n        selected: (function () {\n            return this.get('selectedTask.id') === this.get('item.id');\n        }).property('selectedTask'),\n        didInsert: function didInsert() {},\n        didRender: function didRender() {\n            this._super.apply(this, arguments);\n\n            document.addEventListener(\"focusTask\", (function (e) {\n                if (e.detail.taskid === this.get(\"item.id\")) {\n                    var title = this.$(\".name .content\");\n                    if (title) {\n                        title.attr(\"contenteditable\", \"true\").focus();\n                    }\n                }\n            }).bind(this), false);\n        },\n        actions: {\n            createTaskHandler: function createTaskHandler(props, callback) {\n                console.log(\"AAAA\");\n                this.sendAction('createTaskHandler', props, callback);\n            },\n            updateTaskHandler: function updateTaskHandler(props, callback) {\n                this.sendAction('updateTaskHandler', props);\n            },\n            handleEnter: function handleEnter(isShiftKey) {\n                this.sendAction('enterHandler', this.get(\"item.id\"), isShiftKey);\n            },\n            handleTab: function handleTab(isShiftKey) {\n                this.sendAction('tabHandler', this.get(\"item.id\"), isShiftKey);\n            },\n            handleUp: function handleUp(taskid) {\n                this.sendAction('upHandler', this.get(\"item.id\"));\n            },\n            handleDown: function handleDown(taskid) {\n                this.sendAction('downHandler', this.get(\"item.id\"));\n            }\n        }\n    });\n});","define('tasky/components/task-list', ['exports', 'ember'], function (exports, _ember) {\n    exports['default'] = _ember['default'].Component.extend({\n        tagName: 'ul',\n        classNames: ['tasklist'],\n        didRender: function didRender() {\n            this.$().sortable({\n                connectWith: \".tasklist\",\n                handle: \".bullet\"\n            });\n        },\n        getParentTask: function getParentTask(currentTask) {\n            var el = currentTask.parents(\".project\");\n            return el.length ? el.first() : undefined;\n        },\n        decrementPosition: function decrementPosition(taskitems, startpos) {\n\n            taskitems.each((function (index, taskitem) {\n                var id = _ember['default'].$(taskitem).attr(\"projectid\");\n                this.send('updateTaskHandler', {\n                    id: id,\n                    position: startpos++\n                });\n            }).bind(this));\n        },\n        incrementPosition: function incrementPosition(taskitems, startpos) {\n\n            taskitems.each((function (index, taskitem) {\n                var id = _ember['default'].$(taskitem).attr(\"projectid\");\n                this.send('updateTaskHandler', {\n                    id: id,\n                    position: startpos\n                });\n                startpos++;\n            }).bind(this));\n        },\n        sendTaskEvent: function sendTaskEvent(record) {\n            var newTaskEvent = new CustomEvent(\"focusTask\", {\n                detail: {\n                    taskid: record.id\n                }\n            });\n            document.dispatchEvent(newTaskEvent);\n        },\n        getPreviousTask: function getPreviousTask(currenttask) {\n            var prevTask = currenttask.prev().find(\".project:last\");\n\n            if (prevTask.length) {\n                return prevTask;\n            }\n            prevTask = currenttask.prev();\n            if (prevTask.length) {\n                return prevTask;\n            }\n            return currenttask.parents(\".project:first\");\n        },\n        getNextTask: function getNextTask(currenttask) {\n            var nextTask = currenttask.find(\".project:first\");\n            if (nextTask.length) {\n                return nextTask;\n            }\n            nextTask = currenttask.next();\n            if (nextTask.length) {\n                return nextTask;\n            }\n            return currenttask.parents(\".project:first\").next();\n        },\n        actions: {\n            createTaskHandler: function createTaskHandler(props, callback) {\n                console.log(\"Create task handler in task list called %O\", props);\n\n                this.sendAction('createTaskHandler', props, (function (record) {\n\n                    if (callback) {\n                        callback(record);\n                    }\n                }).bind(this));\n            },\n            updateTaskHandler: function updateTaskHandler(props, callback) {\n                this.sendAction('updateTaskHandler', props, (function (record) {\n                    if (callback) {\n                        callback(record);\n                    }\n                }).bind(this));\n            },\n            handleEnter: function handleEnter(taskid, isShiftKey) {\n                console.log(\"Handle enter task list called %s\", taskid);\n                var that = this;\n\n                var curtask = this.$(\".project[projectid='\" + taskid + \"']\");\n\n                //Update current task\n                var titlefld = curtask.find(\".name[projectid='\" + taskid + \"'] .content\");\n                var titleval = titlefld.text();\n                titlefld.removeAttr(\"contenteditable\");\n\n                var props = {\n                    id: taskid,\n                    title: titleval\n                };\n                this.send('updateTaskHandler', props);\n\n                if (!isShiftKey) {\n                    //Create a new task as a sibling to the current task\n                    var currentpos = curtask.index() + 1;\n                    var tasksafter = curtask.nextAll();\n\n                    var parenttask = this.getParentTask(curtask);\n\n                    props = {\n                        position: currentpos + 1\n                    };\n                    if (parenttask) {\n                        props.parentTask = parenttask.attr(\"projectid\");\n                    }\n                    this.send('createTaskHandler', props, (function (record) {\n                        _ember['default'].run.schedule(\"afterRender\", this, (function () {\n                            this.sendTaskEvent(record);\n                        }).bind(this));\n                    }).bind(this));\n\n                    //Increment the positions of following tasks\n                    this.incrementPosition(tasksafter, currentpos + 2);\n                }\n            },\n            handleTab: function handleTab(taskid, isShiftKey) {\n                console.log(\"tab handler called...\");\n                var currenttask = this.$(\".project[projectid='\" + taskid + \"']\");\n                var titlefld = currenttask.find(\".name[projectid='\" + taskid + \"'] .content\");\n\n                var title = titlefld.text();\n\n                if (!isShiftKey) {\n                    var previoustask = currenttask.prev();\n                    if (previoustask.length > 0) {\n\n                        var prevtaskid = previoustask.attr(\"projectid\");\n                        var children = previoustask.find(\".tasklist:first > .project\").length;\n                        console.log(previoustask);\n\n                        this.send('updateTaskHandler', {\n                            id: taskid,\n                            parent: prevtaskid,\n                            title: title,\n                            position: ++children\n                        }, (function (record) {\n                            _ember['default'].run.schedule(\"afterRender\", this, (function () {\n                                this.sendTaskEvent(record);\n                            }).bind(this));\n                        }).bind(this));\n\n                        var nextTasks = currenttask.nextAll();\n                        var newpos = currenttask.index() + 1;\n                        this.decrementPosition(nextTasks, newpos);\n                    }\n                } else {\n                    //Get the parent task for position\n                    //Get the parent of parent task to set as parent\n                    var parentTask = this.getParentTask(currenttask);\n\n                    if (parentTask) {\n                        var parentTaskPos = parentTask.index() + 1;\n                        var tasksAfter = parentTask.nextAll();\n                        var parentOfParent = this.getParentTask(parentTask);\n\n                        var props = {};\n                        props.id = taskid;\n                        props.position = parentTaskPos + 1;\n                        props.title = title;\n\n                        if (parentOfParent) {\n                            props.parent = parentOfParent.attr(\"projectid\");\n                        } else {\n                            props.parent = \"null\";\n                        }\n                        console.log(\"About to update task for shift tab %O\", props);\n                        this.send('updateTaskHandler', props, (function (record) {\n\n                            this.incrementPosition(tasksAfter, parentTaskPos + 2);\n\n                            _ember['default'].run.schedule(\"afterRender\", this, (function () {\n                                this.sendTaskEvent(record);\n                            }).bind(this));\n                        }).bind(this));\n                    }\n                }\n            },\n            handleUp: function handleUp(taskid, isShiftKey) {\n                var currenttask = this.$(\".project[projectid='\" + taskid + \"']\");\n                var titlefld = currenttask.find(\".name[projectid='\" + taskid + \"'] .content\");\n                var title = titlefld.text();\n\n                var parentTask = this.getPreviousTask(currenttask);\n\n                console.log(\"closest task %O\", parentTask);\n                if (parentTask) {\n                    this.sendTaskEvent({\n                        id: parentTask.attr(\"projectid\")\n                    });\n                }\n\n                this.send('updateTaskHandler', {\n                    id: taskid,\n                    title: title\n                });\n            },\n            handleDown: function handleDown(taskid, isShiftKey) {\n                var currenttask = this.$(\".project[projectid='\" + taskid + \"']\");\n                var titlefld = currenttask.find(\".name[projectid='\" + taskid + \"'] .content\");\n                var title = titlefld.text();\n\n                this.send('updateTaskHandler', {\n                    id: taskid,\n                    title: title\n                });\n\n                var nextTask = this.getNextTask(currenttask);\n\n                console.log(\"closest task %O\", nextTask);\n                if (nextTask) {\n                    this.sendTaskEvent({\n                        id: nextTask.attr(\"projectid\")\n                    });\n                }\n            }\n        }\n    });\n});","define('tasky/controllers/index', ['exports', 'ember'], function (exports, _ember) {\n    exports['default'] = _ember['default'].Controller.extend({\n        isSingleTask: false,\n\n        selectedTask: undefined,\n\n        sortProps: ['position:asc'],\n\n        rootTasks: _ember['default'].computed.filter('model.@each.parent', function (item, index, arr) {\n            return this.get(\"isSingleTask\") ? true : item.get('parent.content') == null;\n        }),\n\n        sortedTasks: _ember['default'].computed.sort('rootTasks', 'sortProps'),\n\n        breadcrumb: (function () {\n            var items = _ember['default'].A();\n            if (this.get('selectedTask')) {\n                this.getParentTasks(items, this.get(\"selectedTask\"));\n            }\n            return items;\n        }).property('selectedTask'),\n\n        getParentTasks: function getParentTasks(items, task) {\n            var parent = task.get(\"parent\");\n            if (parent.get('content') != null) {\n                this.getParentTasks(items, parent);\n                items.pushObject(parent);\n            }\n        },\n        actions: {\n            createTask: function createTask(props, callback) {\n\n                props = props ? props : {};\n\n                console.log(\"About to create a new task %s %O\", props.parentTask, props);\n\n                props.position = props.position ? props.position : 1;\n                props.title = props.title ? props.title : '';\n                props.description = props.description ? props.description : '';\n\n                var parenttaskid;\n                if (props.parentTask) {\n                    parenttaskid = props.parentTask;\n\n                    delete props.parentTask;\n                }\n\n                props.id = '_' + Math.random().toString(36).substr(2, 9);\n                var task = this.store.createRecord('task', props);\n\n                if (parenttaskid) {\n                    var parentTask = this.store.findRecord(\"task\", parenttaskid).then(function (parentTask) {\n                        console.log(\"Parent task %O\", parentTask);\n                        parentTask.get(\"children\").pushObject(task);\n                        parentTask.save();\n                    });\n                }\n                task.save().then(function (record) {\n                    if (callback) {\n                        callback(record);\n                    }\n                });\n            },\n            updateTask: function updateTask(props, callback) {\n                console.log(\"In index route update task %O\", props);\n\n                var parenttaskid = props.parent;\n                delete props.parent;\n\n                if (parenttaskid && parenttaskid != 'null') {\n                    this.store.findRecord(\"task\", parenttaskid).then((function (parentTask) {\n\n                        var children = parentTask.get(\"children.length\");\n                        console.log(\"Length of children %s\", children);\n                        props.parent = parentTask;\n                        //props.position = ++children;\n\n                        this.store.findRecord('task', props.id).then(function (task) {\n                            task.setProperties(props);\n                            task.save().then(function (record) {\n                                if (callback) {\n                                    callback(record);\n                                }\n                            });\n                            parentTask.save();\n                        });\n                    }).bind(this));\n                } else {\n                    if (parenttaskid == 'null') {\n                        props.parent = null;\n                    }\n                    this.store.findRecord('task', props.id).then(function (task) {\n                        task.setProperties(props);\n                        task.save().then(function (record) {\n                            if (callback) {\n                                callback(record);\n                            }\n                        });\n                    });\n                }\n            }\n        }\n    });\n});","define('tasky/helpers/pluralize', ['exports', 'ember-inflector/lib/helpers/pluralize'], function (exports, _emberInflectorLibHelpersPluralize) {\n  exports['default'] = _emberInflectorLibHelpersPluralize['default'];\n});","define('tasky/helpers/singularize', ['exports', 'ember-inflector/lib/helpers/singularize'], function (exports, _emberInflectorLibHelpersSingularize) {\n  exports['default'] = _emberInflectorLibHelpersSingularize['default'];\n});","define('tasky/initializers/app-version', ['exports', 'ember-cli-app-version/initializer-factory', 'tasky/config/environment'], function (exports, _emberCliAppVersionInitializerFactory, _taskyConfigEnvironment) {\n  exports['default'] = {\n    name: 'App Version',\n    initialize: (0, _emberCliAppVersionInitializerFactory['default'])(_taskyConfigEnvironment['default'].APP.name, _taskyConfigEnvironment['default'].APP.version)\n  };\n});","define('tasky/initializers/container-debug-adapter', ['exports', 'ember-resolver/container-debug-adapter'], function (exports, _emberResolverContainerDebugAdapter) {\n  exports['default'] = {\n    name: 'container-debug-adapter',\n\n    initialize: function initialize() {\n      var app = arguments[1] || arguments[0];\n\n      app.register('container-debug-adapter:main', _emberResolverContainerDebugAdapter['default']);\n      app.inject('container-debug-adapter:main', 'namespace', 'application:main');\n    }\n  };\n});","define('tasky/initializers/data-adapter', ['exports', 'ember'], function (exports, _ember) {\n\n  /*\n    This initializer is here to keep backwards compatibility with code depending\n    on the `data-adapter` initializer (before Ember Data was an addon).\n  \n    Should be removed for Ember Data 3.x\n  */\n\n  exports['default'] = {\n    name: 'data-adapter',\n    before: 'store',\n    initialize: _ember['default'].K\n  };\n});","define('tasky/initializers/ember-data', ['exports', 'ember-data/setup-container', 'ember-data/-private/core'], function (exports, _emberDataSetupContainer, _emberDataPrivateCore) {\n\n  /*\n  \n    This code initializes Ember-Data onto an Ember application.\n  \n    If an Ember.js developer defines a subclass of DS.Store on their application,\n    as `App.StoreService` (or via a module system that resolves to `service:store`)\n    this code will automatically instantiate it and make it available on the\n    router.\n  \n    Additionally, after an application's controllers have been injected, they will\n    each have the store made available to them.\n  \n    For example, imagine an Ember.js application with the following classes:\n  \n    App.StoreService = DS.Store.extend({\n      adapter: 'custom'\n    });\n  \n    App.PostsController = Ember.ArrayController.extend({\n      // ...\n    });\n  \n    When the application is initialized, `App.ApplicationStore` will automatically be\n    instantiated, and the instance of `App.PostsController` will have its `store`\n    property set to that instance.\n  \n    Note that this code will only be run if the `ember-application` package is\n    loaded. If Ember Data is being used in an environment other than a\n    typical application (e.g., node.js where only `ember-runtime` is available),\n    this code will be ignored.\n  */\n\n  exports['default'] = {\n    name: 'ember-data',\n    initialize: _emberDataSetupContainer['default']\n  };\n});","define('tasky/initializers/export-application-global', ['exports', 'ember', 'tasky/config/environment'], function (exports, _ember, _taskyConfigEnvironment) {\n  exports.initialize = initialize;\n\n  function initialize() {\n    var application = arguments[1] || arguments[0];\n    if (_taskyConfigEnvironment['default'].exportApplicationGlobal !== false) {\n      var value = _taskyConfigEnvironment['default'].exportApplicationGlobal;\n      var globalName;\n\n      if (typeof value === 'string') {\n        globalName = value;\n      } else {\n        globalName = _ember['default'].String.classify(_taskyConfigEnvironment['default'].modulePrefix);\n      }\n\n      if (!window[globalName]) {\n        window[globalName] = application;\n\n        application.reopen({\n          willDestroy: function willDestroy() {\n            this._super.apply(this, arguments);\n            delete window[globalName];\n          }\n        });\n      }\n    }\n  }\n\n  exports['default'] = {\n    name: 'export-application-global',\n\n    initialize: initialize\n  };\n});","define('tasky/initializers/injectStore', ['exports', 'ember'], function (exports, _ember) {\n\n  /*\n    This initializer is here to keep backwards compatibility with code depending\n    on the `injectStore` initializer (before Ember Data was an addon).\n  \n    Should be removed for Ember Data 3.x\n  */\n\n  exports['default'] = {\n    name: 'injectStore',\n    before: 'store',\n    initialize: _ember['default'].K\n  };\n});","define('tasky/initializers/store', ['exports', 'ember'], function (exports, _ember) {\n\n  /*\n    This initializer is here to keep backwards compatibility with code depending\n    on the `store` initializer (before Ember Data was an addon).\n  \n    Should be removed for Ember Data 3.x\n  */\n\n  exports['default'] = {\n    name: 'store',\n    after: 'ember-data',\n    initialize: _ember['default'].K\n  };\n});","define('tasky/initializers/transforms', ['exports', 'ember'], function (exports, _ember) {\n\n  /*\n    This initializer is here to keep backwards compatibility with code depending\n    on the `transforms` initializer (before Ember Data was an addon).\n  \n    Should be removed for Ember Data 3.x\n  */\n\n  exports['default'] = {\n    name: 'transforms',\n    before: 'store',\n    initialize: _ember['default'].K\n  };\n});","define(\"tasky/instance-initializers/ember-data\", [\"exports\", \"ember-data/-private/instance-initializers/initialize-store-service\"], function (exports, _emberDataPrivateInstanceInitializersInitializeStoreService) {\n  exports[\"default\"] = {\n    name: \"ember-data\",\n    initialize: _emberDataPrivateInstanceInitializersInitializeStoreService[\"default\"]\n  };\n});","define('tasky/models/task', ['exports', 'ember', 'ember-data'], function (exports, _ember, _emberData) {\n\n    //import Model from 'ember-data/model';\n    // import attr from 'ember-data/attr';\n    // import { belongsTo, hasMany } from 'ember-data/relationships';\n\n    exports['default'] = _emberData['default'].Model.extend({\n        title: _emberData['default'].attr('string'),\n        description: _emberData['default'].attr('string'),\n        position: _emberData['default'].attr('number'),\n        children: _emberData['default'].hasMany(\"tasks\", { inverse: \"parent\" }),\n        parent: _emberData['default'].belongsTo(\"task\", { inverse: \"children\" }),\n        orderedSubtasks: _ember['default'].computed.sort('children.@each.position', function (task1, task2) {\n            var pos1 = task1.get('position');\n            var pos2 = task2.get('position');\n\n            if (pos1 > pos2) {\n                return 1;\n            } else if (pos1 < pos2) {\n                return -1;\n            }\n\n            return 0;\n        })\n    });\n});","define('tasky/resolver', ['exports', 'ember-resolver'], function (exports, _emberResolver) {\n  exports['default'] = _emberResolver['default'];\n});","define('tasky/router', ['exports', 'ember', 'tasky/config/environment'], function (exports, _ember, _taskyConfigEnvironment) {\n\n  var Router = _ember['default'].Router.extend({\n    location: _taskyConfigEnvironment['default'].locationType\n  });\n\n  Router.map(function () {\n    this.route('task', {\n      path: '/task/:task_id'\n    });\n  });\n\n  exports['default'] = Router;\n});","define('tasky/routes/index', ['exports', 'ember'], function (exports, _ember) {\n    exports['default'] = _ember['default'].Route.extend({\n        model: function model() {\n\n            return this.store.findAll('task');\n        }\n\n    });\n});","define('tasky/routes/task', ['exports', 'ember'], function (exports, _ember) {\n    exports['default'] = _ember['default'].Route.extend({\n\n        model: function model(param) {\n            var taskitem = this.store.findRecord('task', param.task_id);\n            return taskitem;\n        },\n        setupController: function setupController(controller, model) {\n            console.log(\"Setting up controller %O\", model);\n            this.controllerFor(\"index\").setProperties({\n                isSingleTask: true,\n                selectedTask: model,\n                content: _ember['default'].A([model])\n            });\n        },\n        renderTemplate: function renderTemplate() {\n            this.render(\"index\");\n        },\n\n        actions: {\n            willTransition: function willTransition(transition) {\n                console.log(\"Transition %O\", transition);\n                this.controllerFor(\"index\").setProperties({\n                    isSingleTask: false,\n                    selectedTask: undefined\n                });\n            }\n        }\n    });\n});","define('tasky/serializers/application', ['exports', 'ember-localstorage-adapter'], function (exports, _emberLocalstorageAdapter) {\n  exports['default'] = _emberLocalstorageAdapter.LSSerializer.extend();\n});","define('tasky/serializers/ls-serializer', ['exports', 'ember-localstorage-adapter/serializers/ls-serializer'], function (exports, _emberLocalstorageAdapterSerializersLsSerializer) {\n  exports['default'] = _emberLocalstorageAdapterSerializersLsSerializer['default'];\n});","define('tasky/services/ajax', ['exports', 'ember-ajax/services/ajax'], function (exports, _emberAjaxServicesAjax) {\n  Object.defineProperty(exports, 'default', {\n    enumerable: true,\n    get: function get() {\n      return _emberAjaxServicesAjax['default'];\n    }\n  });\n});","define(\"tasky/templates/application\", [\"exports\"], function (exports) {\n  exports[\"default\"] = Ember.HTMLBars.template((function () {\n    return {\n      meta: {\n        \"fragmentReason\": {\n          \"name\": \"missing-wrapper\",\n          \"problems\": [\"multiple-nodes\", \"wrong-type\"]\n        },\n        \"revision\": \"Ember@2.5.1\",\n        \"loc\": {\n          \"source\": null,\n          \"start\": {\n            \"line\": 1,\n            \"column\": 0\n          },\n          \"end\": {\n            \"line\": 4,\n            \"column\": 0\n          }\n        },\n        \"moduleName\": \"tasky/templates/application.hbs\"\n      },\n      isEmpty: false,\n      arity: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      buildFragment: function buildFragment(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"h2\");\n        dom.setAttribute(el1, \"id\", \"title\");\n        var el2 = dom.createTextNode(\"Tasky\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n        var morphs = new Array(1);\n        morphs[0] = dom.createMorphAt(fragment, 2, 2, contextualElement);\n        return morphs;\n      },\n      statements: [[\"content\", \"outlet\", [\"loc\", [null, [3, 0], [3, 10]]]]],\n      locals: [],\n      templates: []\n    };\n  })());\n});","define(\"tasky/templates/components/bread-crumb\", [\"exports\"], function (exports) {\n  exports[\"default\"] = Ember.HTMLBars.template((function () {\n    var child0 = (function () {\n      return {\n        meta: {\n          \"fragmentReason\": false,\n          \"revision\": \"Ember@2.5.1\",\n          \"loc\": {\n            \"source\": null,\n            \"start\": {\n              \"line\": 2,\n              \"column\": 8\n            },\n            \"end\": {\n              \"line\": 2,\n              \"column\": 45\n            }\n          },\n          \"moduleName\": \"tasky/templates/components/bread-crumb.hbs\"\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"Home\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes() {\n          return [];\n        },\n        statements: [],\n        locals: [],\n        templates: []\n      };\n    })();\n    var child1 = (function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            \"fragmentReason\": false,\n            \"revision\": \"Ember@2.5.1\",\n            \"loc\": {\n              \"source\": null,\n              \"start\": {\n                \"line\": 6,\n                \"column\": 8\n              },\n              \"end\": {\n                \"line\": 6,\n                \"column\": 79\n              }\n            },\n            \"moduleName\": \"tasky/templates/components/bread-crumb.hbs\"\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createComment(\"\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n            dom.insertBoundary(fragment, 0);\n            dom.insertBoundary(fragment, null);\n            return morphs;\n          },\n          statements: [[\"content\", \"breadcrumbitem.title\", [\"loc\", [null, [6, 55], [6, 79]]]]],\n          locals: [],\n          templates: []\n        };\n      })();\n      return {\n        meta: {\n          \"fragmentReason\": false,\n          \"revision\": \"Ember@2.5.1\",\n          \"loc\": {\n            \"source\": null,\n            \"start\": {\n              \"line\": 4,\n              \"column\": 4\n            },\n            \"end\": {\n              \"line\": 8,\n              \"column\": 4\n            }\n          },\n          \"moduleName\": \"tasky/templates/components/bread-crumb.hbs\"\n        },\n        isEmpty: false,\n        arity: 1,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"li\");\n          dom.setAttribute(el1, \"class\", \"breadcrumbitem\");\n          var el2 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createComment(\"\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);\n          return morphs;\n        },\n        statements: [[\"block\", \"link-to\", [\"task\", [\"get\", \"breadcrumbitem\", [\"loc\", [null, [6, 26], [6, 40]]]]], [\"class\", \"name\"], 0, null, [\"loc\", [null, [6, 8], [6, 91]]]]],\n        locals: [\"breadcrumbitem\"],\n        templates: [child0]\n      };\n    })();\n    return {\n      meta: {\n        \"fragmentReason\": {\n          \"name\": \"missing-wrapper\",\n          \"problems\": [\"multiple-nodes\", \"wrong-type\"]\n        },\n        \"revision\": \"Ember@2.5.1\",\n        \"loc\": {\n          \"source\": null,\n          \"start\": {\n            \"line\": 1,\n            \"column\": 0\n          },\n          \"end\": {\n            \"line\": 9,\n            \"column\": 0\n          }\n        },\n        \"moduleName\": \"tasky/templates/components/bread-crumb.hbs\"\n      },\n      isEmpty: false,\n      arity: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      buildFragment: function buildFragment(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"    \");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"li\");\n        dom.setAttribute(el1, \"class\", \"breadcrumbitem\");\n        var el2 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n        var morphs = new Array(2);\n        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);\n        morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);\n        dom.insertBoundary(fragment, null);\n        return morphs;\n      },\n      statements: [[\"block\", \"link-to\", [\"index\"], [\"class\", \"name\"], 0, null, [\"loc\", [null, [2, 8], [2, 57]]]], [\"block\", \"each\", [[\"get\", \"items\", [\"loc\", [null, [4, 12], [4, 17]]]]], [], 1, null, [\"loc\", [null, [4, 4], [8, 13]]]]],\n      locals: [],\n      templates: [child0, child1]\n    };\n  })());\n});","define(\"tasky/templates/components/editable-div\", [\"exports\"], function (exports) {\n  exports[\"default\"] = Ember.HTMLBars.template((function () {\n    return {\n      meta: {\n        \"fragmentReason\": {\n          \"name\": \"missing-wrapper\",\n          \"problems\": [\"wrong-type\"]\n        },\n        \"revision\": \"Ember@2.5.1\",\n        \"loc\": {\n          \"source\": null,\n          \"start\": {\n            \"line\": 1,\n            \"column\": 0\n          },\n          \"end\": {\n            \"line\": 2,\n            \"column\": 0\n          }\n        },\n        \"moduleName\": \"tasky/templates/components/editable-div.hbs\"\n      },\n      isEmpty: false,\n      arity: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      buildFragment: function buildFragment(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n        var morphs = new Array(1);\n        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n        dom.insertBoundary(fragment, 0);\n        return morphs;\n      },\n      statements: [[\"content\", \"yield\", [\"loc\", [null, [1, 0], [1, 9]]]]],\n      locals: [],\n      templates: []\n    };\n  })());\n});","define(\"tasky/templates/components/task-item\", [\"exports\"], function (exports) {\n  exports[\"default\"] = Ember.HTMLBars.template((function () {\n    var child0 = (function () {\n      return {\n        meta: {\n          \"fragmentReason\": false,\n          \"revision\": \"Ember@2.5.1\",\n          \"loc\": {\n            \"source\": null,\n            \"start\": {\n              \"line\": 2,\n              \"column\": 4\n            },\n            \"end\": {\n              \"line\": 2,\n              \"column\": 43\n            }\n          },\n          \"moduleName\": \"tasky/templates/components/task-item.hbs\"\n        },\n        isEmpty: true,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes() {\n          return [];\n        },\n        statements: [],\n        locals: [],\n        templates: []\n      };\n    })();\n    return {\n      meta: {\n        \"fragmentReason\": {\n          \"name\": \"missing-wrapper\",\n          \"problems\": [\"multiple-nodes\"]\n        },\n        \"revision\": \"Ember@2.5.1\",\n        \"loc\": {\n          \"source\": null,\n          \"start\": {\n            \"line\": 1,\n            \"column\": 0\n          },\n          \"end\": {\n            \"line\": 10,\n            \"column\": 0\n          }\n        },\n        \"moduleName\": \"tasky/templates/components/task-item.hbs\"\n      },\n      isEmpty: false,\n      arity: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      buildFragment: function buildFragment(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1, \"class\", \"name\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n    \\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1, \"class\", \"description\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2, \"class\", \"content\");\n        dom.setAttribute(el2, \"contenteditable\", \"\");\n        var el3 = dom.createComment(\"\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n        var element0 = dom.childAt(fragment, [0]);\n        var morphs = new Array(5);\n        morphs[0] = dom.createAttrMorph(element0, 'projectid');\n        morphs[1] = dom.createAttrMorph(element0, 'selectedTask');\n        morphs[2] = dom.createMorphAt(element0, 1, 1);\n        morphs[3] = dom.createMorphAt(element0, 3, 3);\n        morphs[4] = dom.createMorphAt(dom.childAt(fragment, [2, 1]), 0, 0);\n        return morphs;\n      },\n      statements: [[\"attribute\", \"projectid\", [\"concat\", [[\"get\", \"item.id\", [\"loc\", [null, [1, 31], [1, 38]]]]]]], [\"attribute\", \"selectedTask\", [\"concat\", [[\"get\", \"selectedTask.id\", [\"loc\", [null, [1, 58], [1, 73]]]]]]], [\"block\", \"link-to\", [\"task\", [\"get\", \"item\", [\"loc\", [null, [2, 22], [2, 26]]]]], [\"class\", \"bullet\"], 0, null, [\"loc\", [null, [2, 4], [2, 55]]]], [\"inline\", \"editable-div\", [], [\"value\", [\"subexpr\", \"@mut\", [[\"get\", \"item.title\", [\"loc\", [null, [4, 25], [4, 35]]]]], [], []], \"class\", \"content\", \"enterHandler\", \"handleEnter\", \"tabHandler\", \"handleTab\", \"upHandler\", \"handleUp\", \"downHandler\", \"handleDown\"], [\"loc\", [null, [4, 4], [4, 149]]]], [\"content\", \"item.description\", [\"loc\", [null, [7, 41], [7, 61]]]]],\n      locals: [],\n      templates: [child0]\n    };\n  })());\n});","define(\"tasky/templates/components/task-list\", [\"exports\"], function (exports) {\n  exports[\"default\"] = Ember.HTMLBars.template((function () {\n    var child0 = (function () {\n      return {\n        meta: {\n          \"fragmentReason\": {\n            \"name\": \"triple-curlies\"\n          },\n          \"revision\": \"Ember@2.5.1\",\n          \"loc\": {\n            \"source\": null,\n            \"start\": {\n              \"line\": 1,\n              \"column\": 0\n            },\n            \"end\": {\n              \"line\": 8,\n              \"column\": 0\n            }\n          },\n          \"moduleName\": \"tasky/templates/components/task-list.hbs\"\n        },\n        isEmpty: false,\n        arity: 1,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"li\");\n          dom.setAttribute(el1, \"class\", \"project\");\n          var el2 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createComment(\"\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n        \\n        \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createComment(\"\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n        \\n    \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var element0 = dom.childAt(fragment, [1]);\n          var morphs = new Array(4);\n          morphs[0] = dom.createAttrMorph(element0, 'projectid');\n          morphs[1] = dom.createAttrMorph(element0, 'position');\n          morphs[2] = dom.createMorphAt(element0, 1, 1);\n          morphs[3] = dom.createMorphAt(element0, 3, 3);\n          return morphs;\n        },\n        statements: [[\"attribute\", \"projectid\", [\"concat\", [[\"get\", \"item.id\", [\"loc\", [null, [2, 37], [2, 44]]]]]]], [\"attribute\", \"position\", [\"concat\", [[\"get\", \"item.position\", [\"loc\", [null, [2, 60], [2, 73]]]]]]], [\"inline\", \"task-item\", [], [\"item\", [\"subexpr\", \"@mut\", [[\"get\", \"item\", [\"loc\", [null, [3, 25], [3, 29]]]]], [], []], \"selectedTask\", [\"subexpr\", \"@mut\", [[\"get\", \"selectedTask\", [\"loc\", [null, [3, 43], [3, 55]]]]], [], []], \"createTaskHandler\", \"createTaskHandler\", \"updateTaskHandler\", \"updateTaskHandler\", \"enterHandler\", \"handleEnter\", \"tabHandler\", \"handleTab\", \"upHandler\", \"handleUp\", \"downHandler\", \"handleDown\"], [\"loc\", [null, [3, 8], [3, 229]]]], [\"inline\", \"task-list\", [], [\"model\", [\"subexpr\", \"@mut\", [[\"get\", \"item.orderedSubtasks\", [\"loc\", [null, [5, 26], [5, 46]]]]], [], []], \"selectedTask\", [\"subexpr\", \"@mut\", [[\"get\", \"selectedTask\", [\"loc\", [null, [5, 60], [5, 72]]]]], [], []], \"createTaskHandler\", \"createTaskHandler\", \"updateTaskHandler\", \"updateTaskHandler\"], [\"loc\", [null, [5, 8], [5, 150]]]]],\n        locals: [\"item\"],\n        templates: []\n      };\n    })();\n    return {\n      meta: {\n        \"fragmentReason\": {\n          \"name\": \"missing-wrapper\",\n          \"problems\": [\"wrong-type\"]\n        },\n        \"revision\": \"Ember@2.5.1\",\n        \"loc\": {\n          \"source\": null,\n          \"start\": {\n            \"line\": 1,\n            \"column\": 0\n          },\n          \"end\": {\n            \"line\": 10,\n            \"column\": 0\n          }\n        },\n        \"moduleName\": \"tasky/templates/components/task-list.hbs\"\n      },\n      isEmpty: false,\n      arity: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      buildFragment: function buildFragment(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n        var morphs = new Array(1);\n        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n        dom.insertBoundary(fragment, 0);\n        return morphs;\n      },\n      statements: [[\"block\", \"each\", [[\"get\", \"model\", [\"loc\", [null, [1, 8], [1, 13]]]]], [], 0, null, [\"loc\", [null, [1, 0], [8, 9]]]]],\n      locals: [],\n      templates: [child0]\n    };\n  })());\n});","define(\"tasky/templates/index\", [\"exports\"], function (exports) {\n  exports[\"default\"] = Ember.HTMLBars.template((function () {\n    var child0 = (function () {\n      return {\n        meta: {\n          \"fragmentReason\": false,\n          \"revision\": \"Ember@2.5.1\",\n          \"loc\": {\n            \"source\": null,\n            \"start\": {\n              \"line\": 3,\n              \"column\": 4\n            },\n            \"end\": {\n              \"line\": 5,\n              \"column\": 4\n            }\n          },\n          \"moduleName\": \"tasky/templates/index.hbs\"\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"        \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [[\"inline\", \"bread-crumb\", [], [\"items\", [\"subexpr\", \"@mut\", [[\"get\", \"breadcrumbitem\", [\"loc\", [null, [4, 28], [4, 42]]]]], [], []]], [\"loc\", [null, [4, 8], [4, 44]]]]],\n        locals: [],\n        templates: []\n      };\n    })();\n    return {\n      meta: {\n        \"fragmentReason\": {\n          \"name\": \"triple-curlies\"\n        },\n        \"revision\": \"Ember@2.5.1\",\n        \"loc\": {\n          \"source\": null,\n          \"start\": {\n            \"line\": 1,\n            \"column\": 0\n          },\n          \"end\": {\n            \"line\": 11,\n            \"column\": 0\n          }\n        },\n        \"moduleName\": \"tasky/templates/index.hbs\"\n      },\n      isEmpty: false,\n      arity: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      buildFragment: function buildFragment(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1, \"class\", \"page\");\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n    \\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"a\");\n        var el3 = dom.createTextNode(\"+\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n        var element0 = dom.childAt(fragment, [1]);\n        var element1 = dom.childAt(element0, [5]);\n        var morphs = new Array(3);\n        morphs[0] = dom.createMorphAt(element0, 1, 1);\n        morphs[1] = dom.createMorphAt(element0, 3, 3);\n        morphs[2] = dom.createElementMorph(element1);\n        return morphs;\n      },\n      statements: [[\"block\", \"if\", [[\"get\", \"selectedTask\", [\"loc\", [null, [3, 10], [3, 22]]]]], [], 0, null, [\"loc\", [null, [3, 4], [5, 11]]]], [\"inline\", \"task-list\", [], [\"model\", [\"subexpr\", \"@mut\", [[\"get\", \"sortedTasks\", [\"loc\", [null, [7, 22], [7, 33]]]]], [], []], \"selectedTask\", [\"subexpr\", \"@mut\", [[\"get\", \"selectedTask\", [\"loc\", [null, [7, 47], [7, 59]]]]], [], []], \"createTaskHandler\", \"createTask\", \"updateTaskHandler\", \"updateTask\"], [\"loc\", [null, [7, 4], [7, 123]]]], [\"element\", \"action\", [\"createTask\"], [], [\"loc\", [null, [9, 7], [9, 30]]]]],\n      locals: [],\n      templates: [child0]\n    };\n  })());\n});","define(\"tasky/templates/task\", [\"exports\"], function (exports) {\n  exports[\"default\"] = Ember.HTMLBars.template((function () {\n    return {\n      meta: {\n        \"fragmentReason\": {\n          \"name\": \"missing-wrapper\",\n          \"problems\": [\"wrong-type\"]\n        },\n        \"revision\": \"Ember@2.5.1\",\n        \"loc\": {\n          \"source\": null,\n          \"start\": {\n            \"line\": 1,\n            \"column\": 0\n          },\n          \"end\": {\n            \"line\": 2,\n            \"column\": 0\n          }\n        },\n        \"moduleName\": \"tasky/templates/task.hbs\"\n      },\n      isEmpty: false,\n      arity: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      buildFragment: function buildFragment(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n        var morphs = new Array(1);\n        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n        dom.insertBoundary(fragment, 0);\n        return morphs;\n      },\n      statements: [[\"content\", \"outlet\", [\"loc\", [null, [1, 0], [1, 10]]]]],\n      locals: [],\n      templates: []\n    };\n  })());\n});","/* jshint ignore:start */\n\n\n\n/* jshint ignore:end */\n","/* jshint ignore:start */\n\ndefine('tasky/config/environment', ['ember'], function(Ember) {\n  var prefix = 'tasky';\n/* jshint ignore:start */\n\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = Ember['default'].$('meta[name=\"' + metaName + '\"]').attr('content');\n  var config = JSON.parse(unescape(rawConfig));\n\n  return { 'default': config };\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n/* jshint ignore:end */\n\n});\n\n/* jshint ignore:end */\n","/* jshint ignore:start */\n\nif (!runningTests) {\n  require(\"tasky/app\")[\"default\"].create({\"name\":\"tasky\",\"version\":\"0.0.0+3377cb80\"});\n}\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;;ACHA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdzFA;AACA;;ACDA;AACA;;ACDA;AACA;;ACDA;AACA;;ACDA;AACA;;ACDA;AACA;;ACDA;AACA;;ACDA;AACA;;ACDA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzjtGA;AACA;;ACDA;AACA;;ACDA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;;ACDA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClrvGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5CA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;","file":"tasky.js"}